{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "subnetName": {
            "type": "string",
            "metadata": {
                "description": "The name of the pre-created subnet. ex: example-SN"
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "The name of the pre-created virtual network. ex: example-VN"
            }
        },
        "publicIpAddressType": {
            "type": "string",
            "defaultValue": "static",
            "allowedValues": [
                "static",
                "dynamic"
            ],
            "metadata": {
                "description": "The type of the public ip. ex: static or dynamic"
            }
        },
        "publicIpAddressSku": {
            "type": "string",
            "defaultValue": "basic",
            "allowedValues": [
                "basic",
                "standard"
            ],
            "metadata": {
                "description": "The SKU of the public ip. ex: basic or standard"
            }
        },
        "osDiskType": {
            "type": "string"
        },
        "dataDisks": {
            "type": "array"
        },
        "dataDiskResources": {
            "type": "array"
        },
        "virtualMachineSize": {
            "type": "string"
        },
        "adminUsername": {
            "type": "string"
        },
        "adminPassword": {
            "type": "secureString"
        },
        "diagnosticsStorageAccountName": {
            "type": "string"
        },
        "projectName": {
            "type": "string",
            "metadata": {
                "description": "The name of the project. This string will be used to name the virtual machine and associated resources."
            }
        },
        "vmPurpose": {
            "type": "string",
            "metadata": {
                "description": "The purpose of the virtual machine. ex: App (application), Data (database)"
            }
        },
        "vmNumber": {
            "type": "integer",
        
            "metadata": {
                    "description": "The number of the virtual machine. This integer will be used to name the virtual machine."
            }
        },
        "environmentName": {
            "type": "string",
            "defaultValue": "dev",
            "allowedValues": [
                "dev",
                "staging",
                "prod",
                "DEV",
                "STAGING",
                "PROD"
            ],
            "metadata": {
                "description": "The environment of the virtual network. This string will be used to name the network security group."
            }
        },
    },
    "functions": [
        {
            "namespace": "env",
            "members": {
                "transform": {
                    "parameters": [
                        {
                            "name": "env",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[if(equals(toUpper(parameters('env')), 'PROD'), '', concat('-', toUpper(parameters('env'))))]"
                    }
                }
            }
        },
        {
            "namespace": "name",
            "members": {
                "clean": {
                    "parameters": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[replace(replace(replace(parameters('name'), '-', ''), '_', ''), ' ', '')]"
                    }
                }
            }
        }
    ],
    "variables": {
        "vm_name": "[concat(name.clean(parameters('projectName')), parameters('vmPurpose'), parameters('vmNumber'), env.transform(parameters('environmentName')))]",
        "vm_publicip": "[concat(name.clean(parameters('projectName')), parameters('vmPurpose'), parameters('vmNumber'),env.transform(parameters('environmentName')), '-PublicIP')]",
        "vm_disk": "[concat(name.clean(parameters('projectName')), parameters('vmPurpose'), parameters('vmNumber'),env.transform(parameters('environmentName')), '-Disk')]",
        "vm_nic": "[concat(name.clean(parameters('projectName')), parameters('vmPurpose'), parameters('vmNumber'),env.transform(parameters('environmentName')), '-NIC')]",
        "vnetName": "[parameters('virtualNetworkName')]",
        "subnetRef": "[concat(variables('vnetName'), '/subnets/', parameters('subnetName'))]"
    },
    "resources": [
        {
            "name": "[variables('vm_publicip')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2019-02-01",
            "location": "Canada Central",
            "properties": {
                "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
            },
            "sku": {
                "name": "[parameters('publicIpAddressSku')]"
            }
        },        
        {
            "name": "[variables('vm_nic')]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-07-01",
            "location": "Canada Central",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIpAddresses/', variables('vm_nic'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIpAddress": {
                                "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', variables('vm_nic'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "name": "[variables('vm_disk')]",
            "type": "Microsoft.Compute/disks",
            "apiVersion": "2019-07-01",
            "location": "Canada Central",
            "properties": "[parameters('dataDiskResources')[copyIndex()].properties]",
            "sku": {
                "name": "[parameters('dataDiskResources')[copyIndex()].sku]"
            },
            "copy": {
                "name": "managedDiskResources",
                "count": "[length(parameters('dataDiskResources'))]"
            }
        },
        {
            "name": "[variables('vm_name')]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "location": "Canada Central",
            "dependsOn": [
                "managedDiskResources",
                "[concat('Microsoft.Network/networkInterfaces/', variables('vm_nic'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "fromImage",
                        "managedDisk": {
                            "storageAccountType": "[parameters('osDiskType')]"
                        }
                    },
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "2016-Datacenter",
                        "version": "latest"
                    },
                    "copy": [
                        {
                            "name": "dataDisks",
                            "count": "[length(parameters('dataDisks'))]",
                            "input": {
                                "lun": "[parameters('dataDisks')[copyIndex('dataDisks')].lun]",
                                "createOption": "[parameters('dataDisks')[copyIndex('dataDisks')].createOption]",
                                "caching": "[parameters('dataDisks')[copyIndex('dataDisks')].caching]",
                                "writeAcceleratorEnabled": "[parameters('dataDisks')[copyIndex('dataDisks')].writeAcceleratorEnabled]",
                                "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                                "managedDisk": {
                                    "id": "[coalesce(parameters('dataDisks')[copyIndex('dataDisks')].id, if(equals(parameters('dataDisks')[copyIndex('dataDisks')].name, json('null')), json('null'), resourceId('Microsoft.Compute/disks', parameters('dataDisks')[copyIndex('dataDisks')].name)))]",
                                    "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].storageAccountType]",
                                    "diskEncryptionSet": {
                                        "id": "[parameters('dataDisks')[copyIndex('dataDisks')].diskEncryptionSet.id]"
                                    }
                                }
                            }
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vm_nic'))]"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('vm_name')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "windowsConfiguration": {
                        "enableAutomaticUpdates": true,
                        "provisionVmAgent": true
                    }
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', parameters('diagnosticsStorageAccountName'), '.blob.core.windows.net/')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUsername')]"
        }
    }
}