{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "projectName": {
            "type": "string",
            "metadata": {
                "description": "The name of the project. This string will be used to name the resources."
            }
        },
        "projectShortName": {
            "type": "string",
            "metadata": {
                "description": "The name of the project but shortened for naming restrictions. This string will be used to name some resources."
            }
        },
        "environmentName": {
            "type": "string",
            "defaultValue": "dev",
            "allowedValues": [
                "sandbox",
                "dev",
                "staging",
                "prod",
                "SANDBOX",
                "DEV",
                "STAGING",
                "PROD"
            ],
            "metadata": {
                "description": "The environment of the whole solution."
            }
        },
        "administratorLogin": {
            "type": "string"
        },
        "administratorLoginPassword": {
            "type": "securestring"
        },
        "dbTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium",
                "GeneralPurpose",
                "Hyperscale",
                "BusinessCritical"
            ]
        },
        "dbSkuName": {
            "type": "string",
            "defaultValue": "S1"
        },
        "dbMaxSize": {
            "type": "int",
            "defaultValue": 100000000000
        },
        "sqlServerSASub": {
            "type": "string",
            "metadata": {
                "description": "Subscription ID containing the storage account."
            }
        },
        "endpointVnetRG": {
            "type": "string",
            "metadata": {
                "description": "description"
            }
        },
        "endpointVnetName": {
            "type": "string",
            "metadata": {
                "description": "description"
            }
        },
        "endpointSubnetName": {
            "type": "string",
            "metadata": {
                "description": "description"
            }
        },
        "dbDailyRetention": {
            "type": "int",
            "defaultValue": 7,
            "metadata": {
                "description": "How long should daily backups of the database be kept for (days)?"
            }
        },
        "dbWeeklyRetention": {
            "type": "string",
            "defaultValue": "PT0S",
            "metadata": {
                "description": "How long should weekly backups of the database be kept for (ISO 8601 format)? Default value will disable weekly backups."
            }
        },
        "dbMonthlyRetention": {
            "type": "string",
            "defaultValue": "PT0S",
            "metadata": {
                "description": "How long should monthly backups of the database be kept for (ISO 8601 format)? Default value will disable monthly backups."
            }
        },
        "dbYearlyRetention": {
            "type": "string",
            "defaultValue": "PT0S",
            "metadata": {
                "description": "How long should yearly backups of the database be kept for (ISO 8601 format)? Default value will disable yearly backups."
            }
        },
        "dbSARetention": {
            "type": "int",
            "defaultValue": 90,
            "metadata": {
                "description": "Retention period (days) for SQL Server storage account."
            }
        },
        "sqlServerLAWSRetention": {
            "type": "int",
            "defaultValue": 90,
            "metadata": {
                "description": "Retention of Log Analytics Workspace Data (Days)."
            }
        },
        "sqlServerSARetention": {
            "type": "int",
            "defaultValue": 90,
            "metadata": {
                "description": "Retention period (days) for SQL Server storage account."
            }
        }
    },
    "functions": [
        {
            "namespace": "env",
            "members": {
                "transform": {
                    "parameters": [
                        {
                            "name": "env",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[if(equals(toUpper(parameters('env')), 'PROD'), '', concat('-', toUpper(parameters('env'))))]"
                    }
                }
            }
        },
        {
            "namespace": "name",
            "members": {
                "clean": {
                    "parameters": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[replace(replace(replace(parameters('name'), '-', ''), '_', ''), ' ', '')]"
                    }
                }
            }
        }
    ],
    "variables": {
        "sql_server_name": "[concat(toLower(name.clean(parameters('projectName'))),  tolower(env.transform(parameters('environmentName'))), '-sqlserver')]",
        "sql_server_sa_name": "[name.clean(concat(toLower(name.clean(parameters('projectShortName'))),  tolower(env.transform(parameters('environmentName'))), 'sqlserversa'))]",
        "sql_server_nic_name": "[concat(name.clean(parameters('projectName')),  env.transform(parameters('environmentName')), '-SQLServer-NIC')]",
        "sql_server_privateendpoint_name": "[concat(name.clean(parameters('projectName')),  env.transform(parameters('environmentName')), '-SQLServer-PrivateEndpoint')]",
        "sql_server_laws_name": "[concat(name.clean(parameters('projectName')),  env.transform(parameters('environmentName')), '-SQLServer-LAWS')]",
        "sql_db_name": "[concat(name.clean(parameters('projectName')),  env.transform(parameters('environmentName')), '-SQL')]",
        "sql_db_auditing": "[concat(name.clean(parameters('projectName')),  env.transform(parameters('environmentName')), '-SQL-Audit')]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-05-01",
            "name": "[variables('sql_server_nic_name')]",
            "location": "canadacentral",
            "tags": {},
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "sqlServer-sqlServer.privateEndpoint",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId(parameters('endpointVnetRG'),'Microsoft.Network/virtualNetworks/subnets', parameters('endpointVnetName'), parameters('endpointSubnetName'))]"
                            },
                            "primary": true,
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableAcceleratedNetworking": false,
                "enableIPForwarding": false
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2020-05-01",
            "name": "[variables('sql_server_privateendpoint_name')]",
            "location": "canadacentral",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "tags": {},
            "properties": {
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('sql_server_privateendpoint_name')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]",
                            "groupIds": [
                                "SqlServer"
                            ],
                            "privateLinkServiceConnectionState": {
                                "status": "Approved",
                                "description": "Auto-approved",
                                "actionsRequired": "None"
                            }
                        }
                    }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                    "id": "[resourceId(parameters('endpointVnetRG'),'Microsoft.Network/virtualNetworks/subnets', parameters('endpointVnetName'), parameters('endpointSubnetName'))]"
                },
                "customDnsConfigs": [
                    {
                        "fqdn": "[concat(variables('sql_server_name'),'.database.windows.net')]"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2020-08-01-preview",
            "name": "[variables('sql_server_sa_name')]",
            "location": "canadacentral",
            "tags": {},
            "sku": {
                "name": "Standard_GRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "isHnsEnabled": false,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            },
            "resources": [
                {
                    "type": "Microsoft.Storage/storageAccounts/blobServices",
                    "apiVersion": "2020-08-01-preview",
                    "name": "[concat(variables('sql_server_sa_name'), '/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('sql_server_sa_name'))]"
                    ],
                    "sku": {
                        "name": "Standard_GRS",
                        "tier": "Standard"
                    },
                    "properties": {
                        "cors": {
                            "corsRules": []
                        },
                        "deleteRetentionPolicy": {
                            "enabled": false
                        }
                    }
                },
                {
                    "type": "Microsoft.Storage/storageAccounts/fileServices",
                    "apiVersion": "2020-08-01-preview",
                    "name": "[concat(variables('sql_server_sa_name'), '/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('sql_server_sa_name'))]"
                    ],
                    "sku": {
                        "name": "Standard_GRS",
                        "tier": "Standard"
                    },
                    "properties": {
                        "protocolSettings": {
                            "smb": {}
                        },
                        "cors": {
                            "corsRules": []
                        }
                    }
                },
                {
                    "type": "Microsoft.Storage/storageAccounts/queueServices",
                    "apiVersion": "2020-08-01-preview",
                    "name": "[concat(variables('sql_server_sa_name'), '/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('sql_server_sa_name'))]"
                    ],
                    "properties": {
                        "cors": {
                            "corsRules": []
                        }
                    }
                },
                {
                    "type": "Microsoft.Storage/storageAccounts/tableServices",
                    "apiVersion": "2020-08-01-preview",
                    "name": "[concat(variables('sql_server_sa_name'), '/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('sql_server_sa_name'))]"
                    ],
                    "properties": {
                        "cors": {
                            "corsRules": []
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(variables('sql_server_sa_name'), '/default/sqldbauditlogs')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('sql_server_sa_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('sql_server_sa_name'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "microsoft.operationalinsights/workspaces",
            "apiVersion": "2015-11-01-preview",
            "name": "[variables('sql_server_laws_name')]",
            "location": "canadacentral",
            "tags": {},
            "properties": {
                "sku": {
                    "name": "pergb2018"
                },
                "retentionInDays": "[parameters('sqlServerLAWSRetention')]"
            },
            "resources": [
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_General|AlphabeticallySortedComputers')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "All Computers with their most recent data",
                        "Category": "General Exploration",
                        "Query": "search not(ObjectName == \"Advisor Metrics\" or ObjectName == \"ManagedSpace\") | summarize AggregatedValue = max(TimeGenerated) by Computer | limit 500000 | sort by Computer asc\r\n// Oql: NOT(ObjectName=\"Advisor Metrics\" OR ObjectName=ManagedSpace) | measure max(TimeGenerated) by Computer | top 500000 | Sort Computer // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_General|dataPointsPerManagementGroup')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Which Management Group is generating the most data points?",
                        "Category": "General Exploration",
                        "Query": "search * | summarize AggregatedValue = count() by ManagementGroupName\r\n// Oql: * | Measure count() by ManagementGroupName // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_General|dataTypeDistribution')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Distribution of data Types",
                        "Category": "General Exploration",
                        "Query": "search * | extend Type = $table | summarize AggregatedValue = count() by Type\r\n// Oql: * | Measure count() by Type // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_General|StaleComputers')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Stale Computers (data older than 24 hours)",
                        "Category": "General Exploration",
                        "Query": "search not(ObjectName == \"Advisor Metrics\" or ObjectName == \"ManagedSpace\") | summarize lastdata = max(TimeGenerated) by Computer | limit 500000 | where lastdata < ago(24h)\r\n// Oql: NOT(ObjectName=\"Advisor Metrics\" OR ObjectName=ManagedSpace) | measure max(TimeGenerated) as lastdata by Computer | top 500000 | where lastdata < NOW-24HOURS // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|AllEvents')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "All Events",
                        "Category": "Log Management",
                        "Query": "Event | sort by TimeGenerated desc\r\n// Oql: Type=Event // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|AllSyslog')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "All Syslogs",
                        "Category": "Log Management",
                        "Query": "Syslog | sort by TimeGenerated desc\r\n// Oql: Type=Syslog // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|AllSyslogByFacility')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "All Syslog Records grouped by Facility",
                        "Category": "Log Management",
                        "Query": "Syslog | summarize AggregatedValue = count() by Facility\r\n// Oql: Type=Syslog | Measure count() by Facility // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|AllSyslogByProcessName')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "All Syslog Records grouped by ProcessName",
                        "Category": "Log Management",
                        "Query": "Syslog | summarize AggregatedValue = count() by ProcessName\r\n// Oql: Type=Syslog | Measure count() by ProcessName // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|AllSyslogsWithErrors')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "All Syslog Records with Errors",
                        "Category": "Log Management",
                        "Query": "Syslog | where SeverityLevel == \"error\" | sort by TimeGenerated desc\r\n// Oql: Type=Syslog SeverityLevel=error // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|AverageHTTPRequestTimeByClientIPAddress')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Average HTTP Request time by Client IP Address",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = avg(TimeTaken) by cIP\r\n// Oql: Type=W3CIISLog | Measure Avg(TimeTaken) by cIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|AverageHTTPRequestTimeHTTPMethod')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Average HTTP Request time by HTTP Method",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = avg(TimeTaken) by csMethod\r\n// Oql: Type=W3CIISLog | Measure Avg(TimeTaken) by csMethod // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|CountIISLogEntriesClientIPAddress')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Count of IIS Log Entries by Client IP Address",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by cIP\r\n// Oql: Type=W3CIISLog | Measure count() by cIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|CountIISLogEntriesHTTPRequestMethod')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Count of IIS Log Entries by HTTP Request Method",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csMethod\r\n// Oql: Type=W3CIISLog | Measure count() by csMethod // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|CountIISLogEntriesHTTPUserAgent')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Count of IIS Log Entries by HTTP User Agent",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csUserAgent\r\n// Oql: Type=W3CIISLog | Measure count() by csUserAgent // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|CountOfIISLogEntriesByHostRequestedByClient')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Count of IIS Log Entries by Host requested by client",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csHost\r\n// Oql: Type=W3CIISLog | Measure count() by csHost // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|CountOfIISLogEntriesByURLForHost')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Count of IIS Log Entries by URL for the host \"www.contoso.com\" (replace with your own)",
                        "Category": "Log Management",
                        "Query": "search csHost == \"www.contoso.com\" | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csUriStem\r\n// Oql: Type=W3CIISLog csHost=\"www.contoso.com\" | Measure count() by csUriStem // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|CountOfIISLogEntriesByURLRequestedByClient')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Count of IIS Log Entries by URL requested by client (without query strings)",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csUriStem\r\n// Oql: Type=W3CIISLog | Measure count() by csUriStem // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|CountOfWarningEvents')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Count of Events with level \"Warning\" grouped by Event ID",
                        "Category": "Log Management",
                        "Query": "Event | where EventLevelName == \"warning\" | summarize AggregatedValue = count() by EventID\r\n// Oql: Type=Event EventLevelName=warning | Measure count() by EventID // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|DisplayBreakdownRespondCodes')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Shows breakdown of response codes",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by scStatus\r\n// Oql: Type=W3CIISLog | Measure count() by scStatus // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|EventsByEventLog')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Count of Events grouped by Event Log",
                        "Category": "Log Management",
                        "Query": "Event | summarize AggregatedValue = count() by EventLog\r\n// Oql: Type=Event | Measure count() by EventLog // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|EventsByEventsID')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Count of Events grouped by Event ID",
                        "Category": "Log Management",
                        "Query": "Event | summarize AggregatedValue = count() by EventID\r\n// Oql: Type=Event | Measure count() by EventID // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|EventsByEventSource')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Count of Events grouped by Event Source",
                        "Category": "Log Management",
                        "Query": "Event | summarize AggregatedValue = count() by Source\r\n// Oql: Type=Event | Measure count() by Source // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|EventsInOMBetween2000to3000')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Events in the Operations Manager Event Log whose Event ID is in the range between 2000 and 3000",
                        "Category": "Log Management",
                        "Query": "Event | where EventLog == \"Operations Manager\" and EventID >= 2000 and EventID <= 3000 | sort by TimeGenerated desc\r\n// Oql: Type=Event EventLog=\"Operations Manager\" EventID:[2000..3000] // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|EventsWithStartedinEventID')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Count of Events containing the word \"started\" grouped by EventID",
                        "Category": "Log Management",
                        "Query": "search in (Event) \"started\" | summarize AggregatedValue = count() by EventID\r\n// Oql: Type=Event \"started\" | Measure count() by EventID // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|FindMaximumTimeTakenForEachPage')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Find the maximum time taken for each page",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = max(TimeTaken) by csUriStem\r\n// Oql: Type=W3CIISLog | Measure Max(TimeTaken) by csUriStem // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|IISLogEntriesForClientIP')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "IIS Log Entries for a specific client IP Address (replace with your own)",
                        "Category": "Log Management",
                        "Query": "search cIP == \"192.168.0.1\" | extend Type = $table | where Type == W3CIISLog | sort by TimeGenerated desc | project csUriStem, scBytes, csBytes, TimeTaken, scStatus\r\n// Oql: Type=W3CIISLog cIP=\"192.168.0.1\" | Select csUriStem,scBytes,csBytes,TimeTaken,scStatus // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|ListAllIISLogEntries')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "All IIS Log Entries",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | sort by TimeGenerated desc\r\n// Oql: Type=W3CIISLog // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|NoOfConnectionsToOMSDKService')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "How many connections to Operations Manager's SDK service by day",
                        "Category": "Log Management",
                        "Query": "Event | where EventID == 26328 and EventLog == \"Operations Manager\" | summarize AggregatedValue = count() by bin(TimeGenerated, 1d) | sort by TimeGenerated desc\r\n// Oql: Type=Event EventID=26328 EventLog=\"Operations Manager\" | Measure count() interval 1DAY // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|ServerRestartTime')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "When did my servers initiate restart?",
                        "Category": "Log Management",
                        "Query": "search in (Event) \"shutdown\" and EventLog == \"System\" and Source == \"User32\" and EventID == 1074 | sort by TimeGenerated desc | project TimeGenerated, Computer\r\n// Oql: shutdown Type=Event EventLog=System Source=User32 EventID=1074 | Select TimeGenerated,Computer // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|Show404PagesList')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Shows which pages people are getting a 404 for",
                        "Category": "Log Management",
                        "Query": "search scStatus == 404 | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csUriStem\r\n// Oql: Type=W3CIISLog scStatus=404 | Measure count() by csUriStem // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|ShowServersThrowingInternalServerError')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Shows servers that are throwing internal server error",
                        "Category": "Log Management",
                        "Query": "search scStatus == 500 | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by sComputerName\r\n// Oql: Type=W3CIISLog scStatus=500 | Measure count() by sComputerName // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|TotalBytesReceivedByEachAzureRoleInstance')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Total Bytes received by each Azure Role Instance",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(csBytes) by RoleInstance\r\n// Oql: Type=W3CIISLog | Measure Sum(csBytes) by RoleInstance // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|TotalBytesReceivedByEachIISComputer')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Total Bytes received by each IIS Computer",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(csBytes) by Computer | limit 500000\r\n// Oql: Type=W3CIISLog | Measure Sum(csBytes) by Computer | top 500000 // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|TotalBytesRespondedToClientsByClientIPAddress')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Total Bytes responded back to clients by Client IP Address",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(scBytes) by cIP\r\n// Oql: Type=W3CIISLog | Measure Sum(scBytes) by cIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|TotalBytesRespondedToClientsByEachIISServerIPAddress')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Total Bytes responded back to clients by each IIS ServerIP Address",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(scBytes) by sIP\r\n// Oql: Type=W3CIISLog | Measure Sum(scBytes) by sIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|TotalBytesSentByClientIPAddress')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Total Bytes sent by Client IP Address",
                        "Category": "Log Management",
                        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(csBytes) by cIP\r\n// Oql: Type=W3CIISLog | Measure Sum(csBytes) by cIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|WarningEvents')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "All Events with level \"Warning\"",
                        "Category": "Log Management",
                        "Query": "Event | where EventLevelName == \"warning\" | sort by TimeGenerated desc\r\n// Oql: Type=Event EventLevelName=warning // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|WindowsFireawallPolicySettingsChanged')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "Windows Firewall Policy settings have changed",
                        "Category": "Log Management",
                        "Query": "Event | where EventLog == \"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\" and EventID == 2008 | sort by TimeGenerated desc\r\n// Oql: Type=Event EventLog=\"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\" EventID=2008 // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                },
                {
                    "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "[concat(variables('sql_server_laws_name'), '/LogManagement(', variables('sql_server_laws_name'), ')_LogManagement|WindowsFireawallPolicySettingsChangedByMachines')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('sql_server_laws_name'))]"
                    ],
                    "properties": {
                        "DisplayName": "On which machines and how many times have Windows Firewall Policy settings changed",
                        "Category": "Log Management",
                        "Query": "Event | where EventLog == \"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\" and EventID == 2008 | summarize AggregatedValue = count() by Computer | limit 500000\r\n// Oql: Type=Event EventLog=\"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\" EventID=2008 | measure count() by Computer | top 500000 // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                        "Version": 2
                    }
                }
            ]
        },

        {
            "name": "[variables('sql_server_name')]",
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2019-06-01-preview",
            "location": "Canada Central",
            "tags": {},
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
                "version": "12.0",
                "minimalTlsVersion": "1.2",
                "publicNetworkAccess": "disabled"
            },
            "resources": [
                {
                    "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'))]",
                    "type": "Microsoft.Sql/servers/databases",
                    "apiVersion": "2020-08-01-preview",
                    "location": "Canada Central",
                    "tags": {},
                    "sku": {
                        "name": "[parameters('dbSkuName')]",
                        "tier": "[parameters('dbTier')]"
                    },
                    "properties": {
                        "maxSizeBytes": "[parameters('dbMaxSize')]",
                        "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
                        "zoneRedundant": false,
                        "licenseType": "LicenseIncluded",
                        "readScale": "Disabled",
                        "storageAccountType": "GRS"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ]
                },
                {
                    "type": "Microsoft.Sql/servers/privateEndpointConnections",
                    "apiVersion": "2018-06-01-preview",
                    "name": "[concat(variables('sql_server_name'), '/', variables('sql_server_name'), '-Endpoint-caa1bbe4-b573-4f1c-b78f-5ca70f079b09')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]",
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('sql_server_privateendpoint_name'))]"
                    ],
                    "properties": {
                        "privateEndpoint": {
                            "id": "[resourceId('Microsoft.Network/privateEndpoints', variables('sql_server_privateendpoint_name'))]"
                        },
                        "privateLinkServiceConnectionState": {
                            "status": "Approved",
                            "description": "Auto-approved"
                        }
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/advisors",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('sql_server_name'), '/CreateIndex')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "autoExecuteValue": "Disabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/advisors",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('sql_server_name'), '/DbParameterization')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "autoExecuteValue": "Disabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/advisors",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('sql_server_name'), '/DefragmentIndex')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "autoExecuteValue": "Disabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/advisors",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('sql_server_name'), '/DropIndex')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "autoExecuteValue": "Disabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/advisors",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('sql_server_name'), '/ForceLastGoodPlan')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "autoExecuteValue": "Enabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/auditingPolicies",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('sql_server_name'), '/Default')]",
                    "location": "Canada Central",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "auditingState": "Disabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/encryptionProtector",
                    "apiVersion": "2015-05-01-preview",
                    "name": "[concat(variables('sql_server_name'), '/current')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "kind": "servicemanaged",
                    "properties": {
                        "serverKeyName": "ServiceManaged",
                        "serverKeyType": "ServiceManaged"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/keys",
                    "apiVersion": "2015-05-01-preview",
                    "name": "[concat(variables('sql_server_name'), '/ServiceManaged')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "kind": "servicemanaged",
                    "properties": {
                        "serverKeyType": "ServiceManaged"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/securityAlertPolicies",
                    "apiVersion": "2020-02-02-preview",
                    "name": "[concat(variables('sql_server_name'), '/Default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "state": "Enabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/auditingSettings",
                    "apiVersion": "2017-03-01-preview",
                    "name": "[concat(variables('sql_server_name'), '/Default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]",
                        "[resourceId('Microsoft.Storage/StorageAccounts', variables('sql_server_sa_name'))]"
                    ],
                    "properties": {
                        "retentionDays": "[parameters('sqlServerSARetention')]",
                        "auditActionsAndGroups": [
                            "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
                            "FAILED_DATABASE_AUTHENTICATION_GROUP",
                            "BATCH_COMPLETED_GROUP"
                        ],
                        "isStorageSecondaryKeyInUse": false,
                        "isAzureMonitorTargetEnabled": true,
                        "state": "Enabled",
                        "storageEndpoint": "[concat('https://', variables('sql_server_sa_name'), '.blob.core.windows.net/')]",
                        "storageAccountSubscriptionId": "[parameters('sqlServerSASub')]"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/vulnerabilityAssessments",
                    "apiVersion": "2018-06-01-preview",
                    "name": "[concat(variables('sql_server_name'), '/Default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]",
                        "[resourceId('Microsoft.Storage/StorageAccounts', variables('sql_server_sa_name'))]"
                    ],
                    "properties": {
                        "storageContainerPath": "[concat('https://', variables('sql_server_sa_name'), '.blob.core.windows.net/vulnerability-assessment/')]",
                        "recurringScans": {
                            "isEnabled": false,
                            "emailSubscriptionAdmins": false,
                            "emails": []
                        }
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/databases/auditingPolicies",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('sql_server_name'), '/master/Default')]",
                    "location": "Canada Central",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "auditingState": "Disabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/databases/auditingSettings",
                    "apiVersion": "2017-03-01-preview",
                    "name": "[concat(variables('sql_server_name'), '/master/Default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "retentionDays": 0,
                        "auditActionsAndGroups": [],
                        "isStorageSecondaryKeyInUse": false,
                        "isAzureMonitorTargetEnabled": false,
                        "state": "Disabled",
                        "storageAccountSubscriptionId": "00000000-0000-0000-0000-000000000000"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/databases/extendedAuditingSettings",
                    "apiVersion": "2017-03-01-preview",
                    "name": "[concat(variables('sql_server_name'), '/master/Default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "retentionDays": 0,
                        "auditActionsAndGroups": [],
                        "isStorageSecondaryKeyInUse": false,
                        "isAzureMonitorTargetEnabled": false,
                        "state": "Disabled",
                        "storageAccountSubscriptionId": "00000000-0000-0000-0000-000000000000"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/databases/geoBackupPolicies",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('sql_server_name'), '/master/Default')]",
                    "location": "Canada Central",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "state": "Disabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/databases/securityAlertPolicies",
                    "apiVersion": "2020-02-02-preview",
                    "name": "[concat(variables('sql_server_name'), '/master/Default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "state": "Disabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('sql_server_name'), '/master/current')]",
                    "location": "Canada Central",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "status": "Disabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/databases/vulnerabilityAssessments",
                    "apiVersion": "2017-03-01-preview",
                    "name": "[concat(variables('sql_server_name'), '/master/Default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
                    ],
                    "properties": {
                        "recurringScans": {
                            "isEnabled": false,
                            "emailSubscriptionAdmins": true
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.OperationsManagement/solutions",
            "apiVersion": "2015-11-01-preview",
            "name": "[variables('sql_db_auditing')]",
            "location": "Canada Central",
            "dependsOn": [
                "[resourceId('microsoft.operationalinsights/workspaces', variables('sql_server_laws_name'))]"
            ],
            "tags": {},
            "plan": {
                "name": "[concat('SQLAuditing[',variables('sql_server_laws_name'),']')]",
                "promotionCode": "",
                "product": "SQLAuditing",
                "publisher": "Microsoft"
            },
            "properties": {
                "workspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('sql_server_laws_name'))]",
                "containedResources": [
                    "[concat(resourceId('microsoft.operationalinsights/workspaces', variables('sql_server_laws_name')), '/views/SQLAccessToSensitiveData')]",
                    "[concat(resourceId('microsoft.operationalinsights/workspaces', variables('sql_server_laws_name')), '/views/SQLSecurityInsights')]"
                ],
                "referencedResources": []
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/advisors",
            "apiVersion": "2014-04-01",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/CreateIndex')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "autoExecuteValue": "Disabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/advisors",
            "apiVersion": "2014-04-01",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/DbParameterization')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "autoExecuteValue": "Disabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/advisors",
            "apiVersion": "2014-04-01",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/DefragmentIndex')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "autoExecuteValue": "Disabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/advisors",
            "apiVersion": "2014-04-01",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/DropIndex')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "autoExecuteValue": "Disabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/advisors",
            "apiVersion": "2014-04-01",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/ForceLastGoodPlan')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "autoExecuteValue": "Enabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/auditingPolicies",
            "apiVersion": "2014-04-01",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/Default')]",
            "location": "Canada Central",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "auditingState": "Disabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/backupLongTermRetentionPolicies",
            "apiVersion": "2017-03-01-preview",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "weeklyRetention": "[parameters('dbWeeklyRetention')]",
                "monthlyRetention": "[parameters('dbMonthlyRetention')]",
                "yearlyRetention": "[parameters('dbYearlyRetention')]",
                "weekOfYear": 1
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies",
            "apiVersion": "2017-10-01-preview",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "retentionDays": "[parameters('dbDailyRetention')]"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/geoBackupPolicies",
            "apiVersion": "2014-04-01",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/Default')]",
            "location": "Canada Central",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "state": "Enabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/securityAlertPolicies",
            "apiVersion": "2020-02-02-preview",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/Default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "state": "Disabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
            "apiVersion": "2014-04-01",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/current')]",
            "location": "Canada Central",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "status": "Enabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/vulnerabilityAssessments",
            "apiVersion": "2017-03-01-preview",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/Default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "recurringScans": {
                    "isEnabled": false,
                    "emailSubscriptionAdmins": true,
                    "emails": []
                }
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/auditingSettings",
            "apiVersion": "2017-03-01-preview",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/Default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]",
                "[resourceId('Microsoft.Storage/StorageAccounts', variables('sql_server_sa_name'))]"
            ],
            "properties": {
                "retentionDays": "[parameters('dbSARetention')]",
                "auditActionsAndGroups": [
                    "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
                    "FAILED_DATABASE_AUTHENTICATION_GROUP",
                    "BATCH_COMPLETED_GROUP"
                ],
                "isStorageSecondaryKeyInUse": false,
                "isAzureMonitorTargetEnabled": true,
                "state": "Enabled",
                "storageEndpoint": "[concat('https://', variables('sql_server_sa_name'), '.blob.core.windows.net/')]",
                "storageAccountSubscriptionId": "[parameters('sqlServerSASub')]"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/extendedAuditingSettings",
            "apiVersion": "2017-03-01-preview",
            "name": "[concat(variables('sql_server_name'), '/', variables('sql_db_name'), '/Default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]",
                "[resourceId('Microsoft.Storage/StorageAccounts', variables('sql_server_sa_name'))]"
            ],
            "properties": {
                "retentionDays": "[parameters('dbSARetention')]",
                "auditActionsAndGroups": [
                    "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
                    "FAILED_DATABASE_AUTHENTICATION_GROUP",
                    "BATCH_COMPLETED_GROUP"
                ],
                "isStorageSecondaryKeyInUse": false,
                "isAzureMonitorTargetEnabled": true,
                "state": "Enabled",
                "storageEndpoint": "[concat('https://', variables('sql_server_sa_name'), '.blob.core.windows.net/')]",
                "storageAccountSubscriptionId": "[parameters('sqlServerSASub')]"
            }
        }

    ],
    "outputs": {
        "sqlServerName": {
            "type": "string",
            "value": "[variables('sql_server_name')]"
        },
        "sqlServerID": {
            "type": "string",
            "value": "[resourceId('Microsoft.Sql/servers',variables('sql_server_name'))]"
        },
        "sqlServerSAName": {
            "type": "string",
            "value": "[variables('sql_server_sa_name')]"
        },
        "sqlServerSAID": {
            "type": "string",
            "value": "[resourceId('Microsoft.Storage/storageAccounts',variables('sql_server_sa_name'))]"
        },
        "sqlServerNICName": {
            "type": "string",
            "value": "[variables('sql_server_nic_name')]"
        },
        "sqlServerNICID": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/networkInterfaces',variables('sql_server_nic_name'))]"
        },
        "sqlServerPEName": {
            "type": "string",
            "value": "[variables('sql_server_privateendpoint_name')]"
        },
        "sqlServerPEID": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/privateEndpoints',variables('sql_server_privateendpoint_name'))]"
        },
        "sqlServerLAWSName": {
            "type": "string",
            "value": "[variables('sql_server_laws_name')]"
        },
        "sqlServerLAWSID": {
            "type": "string",
            "value": "[resourceId('microsoft.operationalinsights/workspaces',variables('sql_server_laws_name'))]"
        },
        "sqlDBName": {
            "type": "string",
            "value": "[variables('sql_db_name')]"
        },
        "sqlDBID": {
            "type": "string",
            "value": "[resourceId('Microsoft.Sql/servers/databases',variables('sql_server_name'),variables('sql_db_name'))]"
        }
    }
}